"use client"

import { useState } from "react"
import { usePathname } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Calculator, Plus, Trash2 } from "lucide-react"
import calcDataJson from "@/components/messages/calc.json"
import type { Locale, CalcData, BudgetCalcDict, ButtonsDict } from "@/types/calc"

const calcData = calcDataJson as CalcData

const renovationCategories = [
  "–î–µ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
  "–ß–µ—Ä–Ω–æ–≤–∞—è –æ—Ç–¥–µ–ª–∫–∞",
  "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞",
  "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞",
  "–û—Ç–¥–µ–ª–∫–∞ —Å—Ç–µ–Ω (—à—Ç—É–∫–∞—Ç—É—Ä–∫–∞, —à–ø–∞–∫–ª—ë–≤–∫–∞)",
  "–ü–æ–∫–ª–µ–π–∫–∞ –æ–±–æ–µ–≤",
  "–ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω",
  "–£–∫–ª–∞–¥–∫–∞ –ø–ª–∏—Ç–∫–∏",
  "–ù–∞—Ç—è–∂–Ω—ã–µ –ø–æ—Ç–æ–ª–∫–∏",
  "–ü–æ–∫—Ä–∞—Å–∫–∞ –ø–æ—Ç–æ–ª–∫–æ–≤",
  "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö –¥–≤–µ—Ä–µ–π",
  "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω–æ–π –¥–≤–µ—Ä–∏",
  "–£–∫–ª–∞–¥–∫–∞ –ª–∞–º–∏–Ω–∞—Ç–∞",
  "–£–∫–ª–∞–¥–∫–∞ –ø–∞—Ä–∫–µ—Ç–∞",
  "–£–∫–ª–∞–¥–∫–∞ –ª–∏–Ω–æ–ª–µ—É–º–∞",
  "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∏–Ω—Ç—É—Å–æ–≤",
  "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–æ–Ω (–ü–í–•)",
  "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–æ–Ω (–¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ)",
  "–û—Ç–¥–µ–ª–∫–∞ –±–∞–ª–∫–æ–Ω–∞",
  "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É—Ö–Ω–∏",
  "–û—Ç–¥–µ–ª–∫–∞ –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã",
  "–û—Ç–¥–µ–ª–∫–∞ —Ç—É–∞–ª–µ—Ç–∞",
  "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—É—à–µ–≤–æ–π –∫–∞–±–∏–Ω—ã",
  "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∞–Ω–Ω–æ–π",
  "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–Ω–∏—Ç–∞–∑–∞",
  "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–µ—Å–∏—Ç–µ–ª–µ–π",
  "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–µ—Ç–æ–∫ –∏ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π",
  "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤",
  "–£–∫–ª–∞–¥–∫–∞ —Ç—ë–ø–ª–æ–≥–æ –ø–æ–ª–∞",
  "–®—É–º–æ–∏–∑–æ–ª—è—Ü–∏—è",
  "–£—Ç–µ–ø–ª–µ–Ω–∏–µ",
]

interface ExpenseItem {
  id: number
  category: string
  cost: string
}

const currencies = [
  { code: "RUB", symbol: "‚ÇΩ", name: "–†—É–±–ª—å" },
  { code: "UAH", symbol: "‚Ç¥", name: "–ì—Ä–∏–≤–Ω–∞" },
  { code: "KZT", symbol: "‚Ç∏", name: "–¢–µ–Ω–≥–µ" },
]

export function RenovationBudgetPlanner() {
  const pathname = usePathname()
  const isEnglish = pathname.startsWith("/en")
  const locale: Locale = isEnglish ? "en" : "ru"

  const t: BudgetCalcDict = calcData[locale].calc.budget
  const b: ButtonsDict = calcData[locale].calc.buttons

  const [items, setItems] = useState<ExpenseItem[]>([{ id: Date.now(), category: "", cost: "" }])
  const [reserve, setReserve] = useState("20")
  const [currency, setCurrency] = useState("RUB")
  const [subtotal, setSubtotal] = useState<number>(0)
  const [reserveAmount, setReserveAmount] = useState<number>(0)
  const [total, setTotal] = useState<number | null>(null)

  const selectedCurrency = currencies.find(c => c.code === currency) || currencies[0]

  const addCategory = () => {
    setItems([...items, { id: Date.now(), category: "", cost: "" }])
  }

  const removeCategory = (id: number) => {
    setItems(items.filter((i) => i.id !== id))
  }

  const updateCategory = (id: number, field: keyof ExpenseItem, value: string) => {
    setItems(items.map((item) => (item.id === id ? { ...item, [field]: value } : item)))
  }

  const calculate = () => {
    const sum = items.reduce((acc, item) => {
      const cost = parseFloat(item.cost.replace(",", ".")) || 0
      return acc + cost
    }, 0)

    const reservePercent = parseFloat(reserve.replace(",", ".")) || 0
    const reserveValue = sum * (reservePercent / 100)
    const finalTotal = sum + reserveValue
    
    setSubtotal(sum)
    setReserveAmount(reserveValue)
    setTotal(finalTotal)
  }

  return (
    <div className="max-w-md mx-auto border rounded-lg p-4 shadow-sm space-y-4 bg-card">
      <h2 className="flex items-center gap-2 text-xl font-semibold">
        <Calculator className="w-5 h-5 text-primary" /> {t.title}
      </h2>

      <div className="space-y-3">
        {items.map((item) => (
          <div key={item.id} className="flex flex-col gap-2">
            <div className="flex gap-2">
              <input
                type="text"
                list={`categories-${item.id}`}
                placeholder={t.category}
                className="flex-1 border rounded-md px-3 py-2 text-sm"
                value={item.category}
                onChange={(e) => updateCategory(item.id, "category", e.target.value)}
              />
              <datalist id={`categories-${item.id}`}>
                {renovationCategories.map((cat) => (
                  <option key={cat} value={cat} />
                ))}
              </datalist>
              <input
                type="number"
                placeholder={t.cost}
                className="w-32 border rounded-md px-3 py-2 text-sm text-right"
                value={item.cost}
                onChange={(e) => updateCategory(item.id, "cost", e.target.value)}
              />
              <Button variant="ghost" size="icon" onClick={() => removeCategory(item.id)} disabled={items.length === 1}>
                <Trash2 className="w-4 h-4" />
              </Button>
            </div>
          </div>
        ))}
      </div>

      <Button variant="outline" onClick={addCategory} className="w-full">
        <Plus className="w-4 h-4 mr-2" /> {t.addCategory}
      </Button>

      <div className="flex gap-2 items-center">
        <label className="text-sm font-medium flex-1">{t.currency}</label>
        <select
          className="flex-1 border rounded-md px-3 py-2 text-sm bg-background"
          value={currency}
          onChange={(e) => setCurrency(e.target.value)}
        >
          {currencies.map((curr) => (
            <option key={curr.code} value={curr.code}>
              {curr.symbol} {curr.name}
            </option>
          ))}
        </select>
      </div>

      <div className="flex gap-2 items-center">
        <label className="text-sm font-medium flex-1">{t.reserve}</label>
        <input
          type="number"
          className="w-24 border rounded-md px-3 py-2 text-sm text-right"
          value={reserve}
          onChange={(e) => setReserve(e.target.value)}
        />
      </div>

      <Button onClick={calculate} className="w-full" size="lg">
        {b.calculate}
      </Button>

      {total !== null && (
        <div className="mt-4 p-3 rounded-lg bg-muted">
          <p className="text-sm text-muted-foreground mb-2">
            {t.subtotal}: <b className="text-foreground">{subtotal.toLocaleString("ru-RU")} {selectedCurrency.symbol}</b>
          </p>
          <p className="text-sm text-muted-foreground mb-2">
            {t.reserveAmount} ({reserve}%): <b className="text-amber-600">{reserveAmount.toLocaleString("ru-RU")} {selectedCurrency.symbol}</b>
          </p>
          <div className="pt-2 mt-2 border-t">
            <p className="text-lg font-bold text-primary">
              üí∞ {t.total}: {total.toLocaleString("ru-RU")} {selectedCurrency.symbol}
            </p>
          </div>
        </div>
      )}
    </div>
  )
}
