{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["\uFEFFimport { defineDocumentType, makeSource } from \"contentlayer2/source-files\"\r\nimport readingTime from \"reading-time\"\r\n\r\n/**\r\n * \u041A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F \u0442\u0438\u043F\u0430 Post \u0434\u043B\u044F \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430 Renohacks.com\r\n * \u0420\u0430\u0431\u043E\u0442\u0430\u0435\u0442 \u0441 \u0434\u0432\u0443\u043C\u044F \u043F\u0430\u043F\u043A\u0430\u043C\u0438:\r\n *   /content/posts/...         \u2192 RU\r\n *   /content/posts/en/...      \u2192 EN\r\n */\r\n\r\nexport const Post = defineDocumentType(() => ({\r\n    name: \"Post\",\r\n    filePathPattern: \"**/*.mdx\",\r\n    contentType: \"mdx\",\r\n    fields: {\r\n        title: { type: \"string\", required: true },\r\n        description: { type: \"string\", required: true },\r\n        date: { type: \"date\", required: true },\r\n        tags: { type: \"list\", of: { type: \"string\" } },\r\n        cover: { type: \"string\", required: true },\r\n        author: { type: \"string\", required: true },\r\n        translationOf: { type: \"string\" },\r\n        draft: { type: \"boolean\", default: false },\r\n        keywords: { type: \"list\", of: { type: \"string\" } },\r\n    },\r\n\r\n    computedFields: {\r\n        // \uD83E\uDDED \u042F\u0437\u044B\u043A \u0441\u0442\u0430\u0442\u044C\u0438: en \u0438\u043B\u0438 ru\r\n        locale: {\r\n            type: \"string\",\r\n            resolve: (post) =>\r\n                /(^|[\\\\/])en[\\\\/]/.test(post._raw.sourceFilePath) ? \"en\" : \"ru\",\r\n        },\r\n\r\n        // \uD83D\uDD17 \u0421\u043B\u0430\u0433 \u2014 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442\u0441\u044F \u0434\u043B\u044F slug \u0438 url\r\n        slug: {\r\n            type: \"string\",\r\n            resolve: (post) =>\r\n                post._raw.flattenedPath\r\n                    .replace(/^posts[\\\\/]/, \"\")\r\n                    .replace(/^en[\\\\/]/, \"\"),\r\n        },\r\n\r\n        // \uD83C\uDF10 \u041F\u043E\u043B\u043D\u044B\u0439 URL \u0441\u0442\u0430\u0442\u044C\u0438\r\n        url: {\r\n            type: \"string\",\r\n            resolve: (post) =>\r\n                /(^|[\\\\/])en[\\\\/]/.test(post._raw.sourceFilePath)\r\n                    ? `/en/posts/${post._raw.flattenedPath.replace(/^en[\\\\/]/, \"\")}`\r\n                    : `/posts/${post._raw.flattenedPath}`,\r\n        },\r\n\r\n        // \u23F1\uFE0F \u0412\u0440\u0435\u043C\u044F \u0447\u0442\u0435\u043D\u0438\u044F\r\n        readingTime: {\r\n            type: \"string\",\r\n            resolve: (post) =>\r\n                Math.ceil(readingTime(post.body.raw).minutes) + \" \u043C\u0438\u043D\",\r\n        },\r\n\r\n        // \uD83D\uDCDA \u041E\u0433\u043B\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u0434\u043B\u044F TableOfContents\r\n        headings: {\r\n            type: \"json\",\r\n            resolve: (doc) =>\r\n                Array.from(doc.body.raw.matchAll(/^###?\\s+(.*)$/gm)).map(\r\n                    ([, text]) => ({\r\n                        text,\r\n                        level: text.startsWith(\"##\") ? 2 : 3,\r\n                    })\r\n                ),\r\n        },\r\n    },\r\n}))\r\n\r\nexport default makeSource({\r\n    contentDirPath: \"content/posts\",\r\n    documentTypes: [Post],\r\n})\r\n"],
  "mappings": ";AAAC,SAAS,oBAAoB,kBAAkB;AAChD,OAAO,iBAAiB;AASjB,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC1C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IAC7C,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,QAAQ,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACzC,eAAe,EAAE,MAAM,SAAS;AAAA,IAChC,OAAO,EAAE,MAAM,WAAW,SAAS,MAAM;AAAA,IACzC,UAAU,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,EACrD;AAAA,EAEA,gBAAgB;AAAA;AAAA,IAEZ,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,SACN,mBAAmB,KAAK,KAAK,KAAK,cAAc,IAAI,OAAO;AAAA,IACnE;AAAA;AAAA,IAGA,MAAM;AAAA,MACF,MAAM;AAAA,MACN,SAAS,CAAC,SACN,KAAK,KAAK,cACL,QAAQ,eAAe,EAAE,EACzB,QAAQ,YAAY,EAAE;AAAA,IACnC;AAAA;AAAA,IAGA,KAAK;AAAA,MACD,MAAM;AAAA,MACN,SAAS,CAAC,SACN,mBAAmB,KAAK,KAAK,KAAK,cAAc,IAC1C,aAAa,KAAK,KAAK,cAAc,QAAQ,YAAY,EAAE,CAAC,KAC5D,UAAU,KAAK,KAAK,aAAa;AAAA,IAC/C;AAAA;AAAA,IAGA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,SAAS,CAAC,SACN,KAAK,KAAK,YAAY,KAAK,KAAK,GAAG,EAAE,OAAO,IAAI;AAAA,IACxD;AAAA;AAAA,IAGA,UAAU;AAAA,MACN,MAAM;AAAA,MACN,SAAS,CAAC,QACN,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,iBAAiB,CAAC,EAAE;AAAA,QACjD,CAAC,CAAC,EAAE,IAAI,OAAO;AAAA,UACX;AAAA,UACA,OAAO,KAAK,WAAW,IAAI,IAAI,IAAI;AAAA,QACvC;AAAA,MACJ;AAAA,IACR;AAAA,EACJ;AACJ,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AACxB,CAAC;",
  "names": []
}
