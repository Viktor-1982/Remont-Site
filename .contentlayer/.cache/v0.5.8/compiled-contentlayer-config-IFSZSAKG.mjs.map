{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["\uFEFFimport { defineDocumentType, makeSource } from \"contentlayer2/source-files\"\r\nimport rehypeSlug from \"rehype-slug\"\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\"\r\nimport remarkGfm from \"remark-gfm\"\r\nimport remarkMdxImages from \"remark-mdx-images\"\r\n\r\n// \u2500\u2500\u2500 helpers \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\nconst toDate = (input?: string | Date | null) => {\r\n    if (!input) return null\r\n    const d = new Date(input as string)\r\n    return isNaN(d.getTime()) ? null : d\r\n}\r\n\r\nconst estimateReadingTime = (text: string) => {\r\n    const words = (text || \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .trim()\r\n        .split(\" \")\r\n        .filter(Boolean).length\r\n    const minutes = Math.max(1, Math.round(words / 200))\r\n    return { words, minutes }\r\n}\r\n\r\n// \u041E\u0433\u043B\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u043F\u043E H2/H3 \u0441 \u043F\u043E\u043B\u043D\u043E\u0446\u0435\u043D\u043D\u043E\u0439 Unicode-\u043D\u043E\u0440\u043C\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0435\u0439\r\nfunction slugifyUnicode(text: string) {\r\n    return text\r\n        .toLowerCase()\r\n        .normalize(\"NFKD\")\r\n        // \u043E\u0441\u0442\u0430\u0432\u043B\u044F\u0435\u043C \u043B\u044E\u0431\u044B\u0435 \u0431\u0443\u043A\u0432\u044B/\u0446\u0438\u0444\u0440\u044B/\u043F\u0440\u043E\u0431\u0435\u043B/\u0434\u0435\u0444\u0438\u0441\r\n        .replace(/[^\\p{L}\\p{N}\\s-]/gu, \"\")\r\n        .trim()\r\n        .replace(/\\s+/g, \"-\")\r\n}\r\n\r\nfunction extractHeadings(raw: string) {\r\n    const lines = raw.split(/\\n/)\r\n    const out: { level: number; text: string; slug: string }[] = []\r\n    for (const line of lines) {\r\n        const m2 = line.match(/^##\\s+(.+)/)\r\n        const m3 = line.match(/^###\\s+(.+)/)\r\n        const hit = m2 ? { level: 2, text: m2[1].trim() } : m3 ? { level: 3, text: m3[1].trim() } : null\r\n        if (hit) {\r\n            const slug = slugifyUnicode(hit.text)\r\n            out.push({ level: hit.level, text: hit.text, slug })\r\n        }\r\n    }\r\n    return out\r\n}\r\n\r\n// \u2500\u2500\u2500 Document: Post \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\nexport const Post = defineDocumentType(() => ({\r\n    name: \"Post\",\r\n    filePathPattern: `posts/**/*.mdx`,   // \u0444\u0430\u0439\u043B\u044B \u043B\u0435\u0436\u0430\u0442 \u0432 content/posts/**/*\r\n    contentType: \"mdx\",\r\n    fields: {\r\n        title:        { type: \"string\", required: true, description: \"\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A\" },\r\n        description:  { type: \"string\", required: true, description: \"\u041A\u0440\u0430\u0442\u043A\u043E\u0435 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\" },\r\n        date:         { type: \"date\",   required: true, description: \"YYYY-MM-DD\" },\r\n        updated:      { type: \"date\",   required: false, description: \"\u0414\u0430\u0442\u0430 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F\" },\r\n        cover:        { type: \"string\", required: false, description: \"\u041F\u0443\u0442\u044C \u043E\u0442 /public\" },\r\n        tags:         { type: \"list\",   of: { type: \"string\" }, required: false },\r\n        draft:        { type: \"boolean\", required: false, default: false },\r\n        author:       { type: \"string\", required: false, default: \"repair-blog\" },\r\n        // \u0412\u041D\u0418\u041C\u0410\u041D\u0418\u0415: readingTime \u041D\u0415 \u043F\u043E\u043B\u0435, \u0430 computedField \u043D\u0438\u0436\u0435\r\n    },\r\n    computedFields: {\r\n        // \u041F\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u043C content/posts/painting/prepare-walls.mdx \u2192 painting/prepare-walls\r\n        slug: {\r\n            type: \"string\",\r\n            resolve: (doc) => doc._raw.flattenedPath.replace(/^posts\\//, \"\")\r\n        },\r\n        url: {\r\n            type: \"string\",\r\n            resolve: (doc) => `/posts/${doc._raw.flattenedPath.replace(/^posts\\//, \"\")}`\r\n        },\r\n        dateParsed: {\r\n            type: \"date\",\r\n            resolve: (doc) => toDate(doc.date as unknown as string)\r\n        },\r\n        updatedParsed: {\r\n            type: \"date\",\r\n            resolve: (doc) => toDate((doc as any).updated || null)\r\n        },\r\n        toc: {\r\n            type: \"json\",\r\n            resolve: (doc) => extractHeadings(doc.body.raw)\r\n        },\r\n        readingTime: {\r\n            type: \"json\",\r\n            resolve: (doc) => estimateReadingTime(doc.body.raw)\r\n        }\r\n    }\r\n}))\r\n\r\n// \u2500\u2500\u2500 Source \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\nexport default makeSource({\r\n    contentDirPath: \"content\",\r\n    documentTypes: [Post],\r\n    disableImportAliasWarning: true,\r\n    mdx: {\r\n        remarkPlugins: [\r\n            remarkGfm,\r\n            remarkMdxImages\r\n        ],\r\n        rehypePlugins: [\r\n            rehypeSlug,\r\n            [rehypeAutolinkHeadings, { behavior: \"append\" }]\r\n        ]\r\n    }\r\n})\r\n"],
  "mappings": "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",
  "names": []
}
