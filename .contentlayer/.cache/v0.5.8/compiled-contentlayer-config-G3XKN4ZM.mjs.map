{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["\uFEFF// contentlayer.config.ts\r\nimport { defineDocumentType, makeSource } from \"contentlayer2/source-files\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport remarkMdxImages from \"remark-mdx-images\";\r\n\r\nfunction extractHeadings(raw: string) {\r\n    const lines = raw.split(/\\n/);\r\n    const out: { level: number; text: string; slug: string }[] = [];\r\n    for (const line of lines) {\r\n        const m2 = line.match(/^##\\s+(.+)/);\r\n        const m3 = line.match(/^###\\s+(.+)/);\r\n        const hit = m2 ? { level: 2, text: m2[1].trim() } : m3 ? { level: 3, text: m3[1].trim() } : null;\r\n        if (hit) {\r\n            const slug = hit.text.toLowerCase().replace(/[^\\w\u0430-\u044F\u0451\\s-]/gi, \"\").replace(/\\s+/g, \"-\");\r\n            out.push({ level: hit.level, text: hit.text, slug });\r\n        }\r\n    }\r\n    return out;\r\n}\r\n\r\nexport const Post = defineDocumentType(() => ({\r\n    name: \"Post\",\r\n    filePathPattern: `posts/**/*.mdx`,\r\n    contentType: \"mdx\",\r\n    fields: {\r\n        title: { type: \"string\", required: true },\r\n        description: { type: \"string\", required: true },\r\n        date: { type: \"date\", required: true }, // YYYY-MM-DD\r\n        cover: { type: \"string\" },\r\n        tags: { type: \"list\", of: { type: \"string\" } },\r\n        author: { type: \"string\" },\r\n        translationOf: { type: \"string\", required: false },\r\n        draft: { type: \"boolean\", default: false },\r\n    },\r\n    computedFields: {\r\n        slug: {\r\n            type: \"string\",\r\n            resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\r\n        },\r\n        locale: {\r\n            type: \"string\",\r\n            resolve: (doc) => (doc._raw.flattenedPath.startsWith(\"posts/en/\") ? \"en\" : \"ru\"),\r\n        },\r\n        url: {\r\n            type: \"string\",\r\n            resolve: (doc) => {\r\n                const slug = doc._raw.sourceFileName.replace(/\\.mdx$/, \"\");\r\n                return doc._raw.flattenedPath.startsWith(\"posts/en/\") ? `/en/posts/${slug}` : `/posts/${slug}`;\r\n            },\r\n        },\r\n        headings: { type: \"json\", resolve: (doc) => extractHeadings(doc.body.raw) },\r\n        dateParsed: {\r\n            type: \"string\",\r\n            resolve: (doc) => (doc.date ? new Date(doc.date).toISOString() : null),\r\n        },\r\n        readingTime: {\r\n            type: \"number\",\r\n            resolve: (doc) => {\r\n                const words = doc.body.raw ? doc.body.raw.split(/\\s+/).length : 0;\r\n                const minutes = Math.max(1, Math.ceil(words / 200));\r\n                return minutes;\r\n            },\r\n        },\r\n    },\r\n}));\r\n\r\nexport default makeSource({\r\n    contentDirPath: \"content\",\r\n    documentTypes: [Post],\r\n    disableImportAliasWarning: true,\r\n    mdx: {\r\n        remarkPlugins: [remarkGfm, remarkMdxImages],\r\n        rehypePlugins: [rehypeSlug, rehypeAutolinkHeadings],\r\n    },\r\n});\r\n"],
  "mappings": ";AACA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,gBAAgB;AACvB,OAAO,4BAA4B;AACnC,OAAO,eAAe;AACtB,OAAO,qBAAqB;AAE5B,SAAS,gBAAgB,KAAa;AAClC,QAAM,QAAQ,IAAI,MAAM,IAAI;AAC5B,QAAM,MAAuD,CAAC;AAC9D,aAAW,QAAQ,OAAO;AACtB,UAAM,KAAK,KAAK,MAAM,YAAY;AAClC,UAAM,KAAK,KAAK,MAAM,aAAa;AACnC,UAAM,MAAM,KAAK,EAAE,OAAO,GAAG,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,KAAK,EAAE,OAAO,GAAG,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI;AAC5F,QAAI,KAAK;AACL,YAAM,OAAO,IAAI,KAAK,YAAY,EAAE,QAAQ,kBAAkB,EAAE,EAAE,QAAQ,QAAQ,GAAG;AACrF,UAAI,KAAK,EAAE,OAAO,IAAI,OAAO,MAAM,IAAI,MAAM,KAAK,CAAC;AAAA,IACvD;AAAA,EACJ;AACA,SAAO;AACX;AAEO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC1C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA;AAAA,IACrC,OAAO,EAAE,MAAM,SAAS;AAAA,IACxB,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IAC7C,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,eAAe,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IACjD,OAAO,EAAE,MAAM,WAAW,SAAS,MAAM;AAAA,EAC7C;AAAA,EACA,gBAAgB;AAAA,IACZ,MAAM;AAAA,MACF,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE;AAAA,IAClE;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAS,IAAI,KAAK,cAAc,WAAW,WAAW,IAAI,OAAO;AAAA,IAC/E;AAAA,IACA,KAAK;AAAA,MACD,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AACd,cAAM,OAAO,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE;AACzD,eAAO,IAAI,KAAK,cAAc,WAAW,WAAW,IAAI,aAAa,IAAI,KAAK,UAAU,IAAI;AAAA,MAChG;AAAA,IACJ;AAAA,IACA,UAAU,EAAE,MAAM,QAAQ,SAAS,CAAC,QAAQ,gBAAgB,IAAI,KAAK,GAAG,EAAE;AAAA,IAC1E,YAAY;AAAA,MACR,MAAM;AAAA,MACN,SAAS,CAAC,QAAS,IAAI,OAAO,IAAI,KAAK,IAAI,IAAI,EAAE,YAAY,IAAI;AAAA,IACrE;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AACd,cAAM,QAAQ,IAAI,KAAK,MAAM,IAAI,KAAK,IAAI,MAAM,KAAK,EAAE,SAAS;AAChE,cAAM,UAAU,KAAK,IAAI,GAAG,KAAK,KAAK,QAAQ,GAAG,CAAC;AAClD,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACJ,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,2BAA2B;AAAA,EAC3B,KAAK;AAAA,IACD,eAAe,CAAC,WAAW,eAAe;AAAA,IAC1C,eAAe,CAAC,YAAY,sBAAsB;AAAA,EACtD;AACJ,CAAC;",
  "names": []
}
